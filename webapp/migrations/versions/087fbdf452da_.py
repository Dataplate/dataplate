"""empty message

Revision ID: 087fbdf452da
Revises: 
Create Date: 2020-09-27 10:53:48.176028

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
# from sqlalchemy_utils import PasswordType

from dataaccess.models import *

# revision identifiers, used by Alembic.
revision = '087fbdf452da'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('datasets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('source_type', sa.String(length=20), nullable=True),
    sa.Column('source_url', sa.String(), nullable=True),
    sa.Column('anonymized', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('global_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('livy_url', sa.String(), nullable=True),
    sa.Column('session_wait_timeout', sa.Integer(), nullable=True),
    sa.Column('statement_wait_timeout', sa.Integer(), nullable=True),
    sa.Column('session_name', sa.String(length=100), nullable=True),
    sa.Column('spark_conf', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('driver_memory_mb', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('queries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('sql', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('internal', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('fullname', sa.String(), nullable=True),
    sa.Column('password', sa.String(length=100)),
    sa.Column('access_key', sa.String(length=32), nullable=True),
    sa.Column('service', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('access_key'),
    sa.UniqueConstraint('username')
    )
    op.create_table('audit_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('remote_ip', sa.String(length=16), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('livy_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('updated_on', sa.DateTime(), nullable=True),
    sa.Column('livy_id', sa.Integer(), nullable=True),
    sa.Column('info', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_datasets',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('dataset_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['datasets.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'dataset_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('audit_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_on', sa.DateTime(), nullable=True),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('user', sa.String(), nullable=True),
    sa.Column('kind', sa.String(length=20), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('_fts', postgresql.TSVECTOR(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['audit_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('created_on_idx', 'audit_entries', ['created_on'], unique=False)
    op.create_index('fts_idx', 'audit_entries', ['_fts'], unique=False, postgresql_using='gin')
    # ### end Alembic commands ###

    # Built-in roles
    op.bulk_insert(Role.__table__, [
        {'name': 'admin', 'description': 'Administrator of the Data Access Portal (has access to everything)', 'internal': True},
        {'name': 'auditor', 'description': 'This role allows access to audit logs', 'internal': True},
        {'name': 'harvester', 'description': 'This role allows managing datasets', 'internal': True},
        {'name': 'query-builder', 'description': 'This role allows adding new queries', 'internal': True},
    ])

    # Full-text search update trigger
    op.execute(sa.DDL('''
        CREATE FUNCTION audit_entries_fts_trigger() RETURNS trigger AS $$
        begin
          new._fts :=
            setweight(to_tsvector(coalesce(new.user,'')), 'A') ||
            setweight(to_tsvector(coalesce(new.kind,'')), 'A') ||
            setweight(to_tsvector(coalesce(new.text,'')), 'A');
          return new;
        end
        $$ LANGUAGE plpgsql;

        CREATE TRIGGER audit_entries_fts_trigger BEFORE INSERT OR UPDATE
          ON audit_entries FOR EACH ROW EXECUTE PROCEDURE audit_entries_fts_trigger();
    '''))

    with op.batch_alter_table('global_config') as batch_op:
        batch_op.add_column(sa.Column('output_path', sa.String(length=250), nullable=True))

    # with op.batch_alter_table('users') as batch_op:
    #     batch_op.add_column(sa.Column('password', sa.String(length=100)))

def downgrade():
    op.execute('DROP TRIGGER audit_entries_fts_trigger ON audit_entries')
    op.execute('DROP FUNCTION audit_entries_fts_trigger()')

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('fts_idx', table_name='audit_entries')
    op.drop_index('created_on_idx', table_name='audit_entries')
    op.drop_table('audit_entries')
    op.drop_table('user_roles')
    op.drop_table('role_datasets')
    op.drop_table('livy_sessions')
    op.drop_table('audit_sessions')
    op.drop_table('users')
    op.drop_table('roles')
    op.drop_table('queries')
    op.drop_table('global_config')
    op.drop_table('datasets')
    # ### end Alembic commands ###
